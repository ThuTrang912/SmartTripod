Thiết lập môi trường backend với YOLOv5


1. Tải tệp mô hình YOLOv5

Tạo một tập lệnh Python để tải tệp mô hình YOLOv5:

python

import requests

url = 'https://github.com/ultralytics/yolov5/releases/download/v6.0/yolov5s.pt'
local_filename = 'yolov5s.pt'

def download_file(url, local_filename):
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:  # filter out keep-alive new chunks
                    f.write(chunk)
    return local_filename

if __name__ == "__main__":
    print(f"Downloading {url} to {local_filename}")
    download_file(url, local_filename)
    print(f"Downloaded {local_filename}")




Chạy tập lệnh này để tải tệp mô hình YOLOv5:
python download_weights.py



2. Thiết lập Flask server với YOLOv5

Tạo một tập lệnh Flask (app.py) để nhận diện hình ảnh:
python

from flask import Flask, request, jsonify
import torch
from PIL import Image
from io import BytesIO

app = Flask(__name__)

# Load YOLOv5 model
model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

@app.route('/detect', methods=['POST'])
def detect():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400

    file = request.files['file']
    img = Image.open(BytesIO(file.read()))

    results = model(img)
    results_list = results.pandas().xyxy[0].to_dict(orient="records")
    
    return jsonify(results_list)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')







Chạy Flask server:

pip install opencv-python
pip install pandas
python app.py






Bước 2: Tích hợp Flutter với backend

1. Thêm gói http vào tệp pubspec.yaml của Flutter:

yaml

dependencies:
  http: ^0.13.3




Chạy lệnh sau để cài đặt gói:
flutter pub get



2. Cập nhật mã Flutter để gửi hình ảnh đến Flask server và nhận kết quả:

dart

import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'identified_object.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final cameras = await availableCameras();
  runApp(MyApp(cameras: cameras));
}

class MyApp extends StatelessWidget {
  final List<CameraDescription> cameras;

  const MyApp({Key? key, required this.cameras}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Camera Demo',
      theme: ThemeData.dark(),
      home: RecogniteCamera(camera: cameras[0]),
    );
  }
}

class RecogniteCamera extends StatefulWidget {
  final CameraDescription camera;

  const RecogniteCamera({Key? key, required this.camera}) : super(key: key);

  @override
  _RecogniteCameraState createState() => _RecogniteCameraState();
}

class _RecogniteCameraState extends State<RecogniteCamera> {
  late CameraController _controller;
  bool _isCameraInitialized = false;

  @override
  void init
